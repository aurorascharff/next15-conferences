{
    "importAriakit": {
        "scope": "typescriptreact",
        "prefix": "importAriakit",
        "body": [
            "import * as Ariakit from '@ariakit/react';"
        ],
    },
    "handleKeyboardAndFocus": {
        "scope": "typescriptreact",
        "prefix": "handleKeyboardAndFocus",
        "body": [
            "const menuRef = useRef<HTMLDivElement | null>(null);",
            "",
            "useEffect(() => {",
            "  if (expanded && menuRef.current) {",
            "    const focusableElements = Array.from(",
            "      menuRef.current.querySelectorAll(",
            "        'button:not([disabled]), [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])',",
            "      ),",
            "    ) as HTMLElement[];",
            "    const firstElement = focusableElements[0];",
            "    const lastElement = focusableElements[focusableElements.length - 1];",
            "",
            "    const handleKeyDown = (event: KeyboardEvent) => {",
            "      if (event.key === 'Tab') {",
            "        if (event.shiftKey && document.activeElement === firstElement) {",
            "          event.preventDefault();",
            "          lastElement.focus();",
            "        } else if (!event.shiftKey && document.activeElement === lastElement) {",
            "          event.preventDefault();",
            "          firstElement.focus();",
            "        }",
            "      } else if (event.key === 'ArrowDown') {",
            "        event.preventDefault();",
            "        const currentIndex = focusableElements.indexOf(document.activeElement as HTMLElement);",
            "        const nextIndex = (currentIndex + 1) % focusableElements.length;",
            "        focusableElements[nextIndex].focus();",
            "      } else if (event.key === 'ArrowUp') {",
            "        event.preventDefault();",
            "        const currentIndex = focusableElements.indexOf(document.activeElement as HTMLElement);",
            "        const prevIndex = (currentIndex - 1 + focusableElements.length) % focusableElements.length;",
            "        focusableElements[prevIndex].focus();",
            "      }",
            "    };",
            "",
            "    document.addEventListener('keydown', handleKeyDown);",
            "",
            "    return () => {",
            "      document.removeEventListener('keydown', handleKeyDown);",
            "    };",
            "  }",
            "}, [expanded]);"
        ]
    },
    "handleEscapeKey": {
        "scope": "typescriptreact",
        "prefix": "handleEscapeKey",
        "body": [
            "useEffect(() => {",
            "  function handleKeyDown(event: KeyboardEvent) {",
            "    if (event.key === 'Escape') {",
            "      setExpanded(false);",
            "    }",
            "  }",
            "",
            "  if (expanded) {",
            "    document.addEventListener('keydown', handleKeyDown);",
            "  } else {",
            "    document.removeEventListener('keydown', handleKeyDown);",
            "  }",
            "",
            "  return () => {",
            "    document.removeEventListener('keydown', handleKeyDown);",
            "  };",
            "}, [expanded]);"
        ]
    }
}